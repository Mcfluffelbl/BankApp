@page "/Konton"
@using BlazorApp1.Domain
@using BlazorApp1.Services
@using BlazorApp1.Interface
@using System.ComponentModel.DataAnnotations
@inject IAccountService AccountService

<h1>Create a Account</h1>

<!-- Egen custom code för custom knapp -->
<style>
.my-custom-btn {
    background-color: seagreen; 
    color: aliceblue;
    border: none;
    transition: background-color 0.3s ease, transform 0.1s ease;
}
.my-custom-btn:hover {
    background-color: darkolivegreen; 
    transform: scale(1.03);
}
.my-custom-btn:active {
    background-color: grey;
    transform: scale(0.98);
}
.my-custom-btn:disabled {
    background-color: lightgray;
    color: darkgray;
    cursor: not-allowed;
}
th {                     
    cursor: pointer;
    background-color: #f8f9fa;
    user-select: none;
}
th:hover {            
    background-color: #e9ecef;
}

</style>

<EditForm Model="_model" OnValidSubmit="CreateAccountAsync" OnInvalidSubmit="HandleInvalidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-row">
        <label>Account Name</label><br />
        <InputText @bind-Value="_model.Name" />
		<ValidationMessage For="@(() => _model.Name)" />
    </div>

    <div class="form-row">
        <label>Account Type</label><br />
        <InputSelect @bind-Value="_model.AccountType">
            @foreach (var type in Enum.GetValues<AccountType>())
            {
                <option value="@type">@type</option>
            }
        </InputSelect>
		<ValidationMessage For="@(() => _model.AccountType)" />
    </div>

    <div class="form-row">
        <label>Currency</label><br />
        <InputText @bind-Value="_model.Currency" />
		<ValidationMessage For="@(() => _model.Currency)" />
    </div>

    <div class="form-row">
        <label>Balance</label><br />
        <InputNumber @bind-Value="_model.InitialBalance" />
		<ValidationMessage For="@(() => _model.InitialBalance)" />
    </div>

    <button type="submit" class="btn my-custom-btn disabled="@(!_isValid)">Create Account</button>   
</EditForm>

<hr />

<h4>Skapade konton:</h4>

@if (!string.IsNullOrEmpty(_errorMessage))
{
    <div class="text-danger">@_errorMessage</div>
}

@if (_accounts.Any())
{
    <table class="table table-striped table-bordered">
        <thead>
            <tr>
                <th @onclick="() => SortBy(nameof(BankAccount.Name))">
                    Name @GetSortIndicator(nameof(BankAccount.Name))
                </th>
                <th @onclick="() => SortBy(nameof(BankAccount.AccountType))">
                    Type @GetSortIndicator(nameof(BankAccount.AccountType))
                </th>
                <th @onclick="() => SortBy(nameof(BankAccount.Currency))">
                    Currency @GetSortIndicator(nameof(BankAccount.Currency))
                </th>
                <th @onclick="() => SortBy(nameof(BankAccount.Balance))">
                    Balance @GetSortIndicator(nameof(BankAccount.Balance))
                </th>
                <th @onclick="() => SortBy(nameof(BankAccount.LastUpdated))">
                    Last Updated @GetSortIndicator(nameof(BankAccount.LastUpdated))
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var account in _accounts)
            {
                <tr>
                    <td>@account.Name</td>
                    <td>@account.AccountType</td>
                    <td>@account.Currency</td>
                    <td style="text-align:right">@($"{account.Balance:N2}")</td>
                    <td>@account.LastUpdated.ToString("g")</td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>Inga konton skapade än.</p>
}

@code {
    private CreateAccountModel _model = new();
    private List<IBankAccount> _accounts = new();
    private string? _errorMessage;
    private bool _isValid = false;

    private string? _currentSortColumn;
    private bool _sortAscending = true;

    protected override async Task OnInitializedAsync()
    {
        _accounts = await AccountService.GetAccounts();
        SortBy(nameof(IBankAccount.Name));
    }

    public async Task CreateAccountAsync()
    {
        try
        {
            _errorMessage = null;
            await AccountService.CreateAccount(
                _model.Name!,
                _model.AccountType,
                _model.Currency!,
                _model.InitialBalance
            );

            _accounts = await AccountService.GetAccounts();
			SortBy(_currentSortColumn ?? nameof(IBankAccount.Name));// sortera efter den kolumnen som användaren klickade på
            _model = new CreateAccountModel(); // töm formulär
			_isValid = false; // återställ valideringsstatus
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }

        StateHasChanged();
    }

	private void SortBy(string? columnName) // SortBy metod för att sortera kolumnerna
    {
        if (string.IsNullOrEmpty(columnName))
            return;

        if (_currentSortColumn == columnName)
            _sortAscending = !_sortAscending; // toggle ascending/descending
        else
        {
            _currentSortColumn = columnName;
            _sortAscending = true;
        }

        _accounts = columnName switch
        {
            nameof(BankAccount.Name) => _sortAscending
                ? _accounts.OrderBy(a => a.Name).ToList()
                : _accounts.OrderByDescending(a => a.Name).ToList(),

            nameof(BankAccount.AccountType) => _sortAscending
                ? _accounts.OrderBy(a => a.AccountType).ToList()
                : _accounts.OrderByDescending(a => a.AccountType).ToList(),

            nameof(BankAccount.Currency) => _sortAscending
                ? _accounts.OrderBy(a => a.Currency).ToList()
                : _accounts.OrderByDescending(a => a.Currency).ToList(),

            nameof(BankAccount.Balance) => _sortAscending
                ? _accounts.OrderBy(a => a.Balance).ToList()
                : _accounts.OrderByDescending(a => a.Balance).ToList(),

            nameof(BankAccount.LastUpdated) => _sortAscending
                ? _accounts.OrderBy(a => a.LastUpdated).ToList()
                : _accounts.OrderByDescending(a => a.LastUpdated).ToList(),

            _ => _accounts
        };
    }

	private string GetSortIndicator(string columnName) //GetSortIndicator metod för att visa uppåt- eller nedåtpil beroende på sorteringsordning
    {
        if (_currentSortColumn != columnName)
            return string.Empty;

        return _sortAscending ? "▲" : "▼";
    }

    private void HandleInvalidSubmit()
    {
		_errorMessage = "Please correct the errors and try again.";
        _isValid = false;
	}
    private void OnFieldChanged()
    {
        var context = new ValidationContext(_model);
        var results = new List<ValidationResult>();
        _isValid = Validator.TryValidateObject(_model, context, results, true);
    }

    public class CreateAccountModel
    {
        [Required(ErrorMessage = "Account name is required")]
		public string? Name { get; set; }

		[Required(ErrorMessage = "Account type is required")]
        public AccountType AccountType { get; set; } = AccountType.Savings;

		[Required(ErrorMessage = "Currency is required")]
		public string? Currency { get; set; } = "SEK"; //lägga till fler valutor senare? Eller låsa till bara SEK?

		[Range(0, double.MaxValue, ErrorMessage = "Initial balance must be non-negative")]
        public decimal InitialBalance { get; set; }
    }
}

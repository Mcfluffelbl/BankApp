@page "/Konton"
@using BlazorApp1.Domain
@using BlazorApp1.Services
@using System.ComponentModel.DataAnnotations
@inject IAccountService AccountService

<h3>Create a Account</h3>

<EditForm Model="_model" OnSubmit="CreateAccountAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-2">
        <label>Account Name</label><br />
        <InputText @bind-Value="_model.Name" />
    </div>

    <div class="mb-2">
        <label>Account Type</label><br />
        <InputSelect @bind-Value="_model.AccountType">
            @foreach (var type in Enum.GetValues<AccountType>())
            {
                <option value="@type">@type</option>
            }
        </InputSelect>
    </div>

    <div class="mb-2">
        <label>Currency</label><br />
        <InputText @bind-Value="_model.Currency" />
    </div>

    <div class="mb-2">
        <label>Balance</label><br />
        <InputNumber @bind-Value="_model.InitialBalance" />
    </div>

    <button type="submit" class="btn btn-primary">Create Account</button>
</EditForm>

<hr />

<h4>Skapade konton:</h4>

@if (!string.IsNullOrEmpty(_errorMessage))
{
    <div class="text-danger">@_errorMessage</div>
}

@if (_createdAccounts.Any())
{
    <ul>
        @foreach (var account in _createdAccounts)
        {
            <li>@account.Name – @account.AccountType – @account.Currency – @account.Balance</li>
        }
    </ul>
}
else
{
    <p>Inga konton skapade än.</p>
}

@code {
    public CreateAccountModel _model = new();
    public List<IBankAccount> _createdAccounts = new();
    private string? _errorMessage;

    protected override void OnInitialized()
    {
        // Hämta konton när sidan laddas
        _createdAccounts = AccountService.GetAccounts();
    }

    public async Task CreateAccountAsync()
    {
        try
        {
            await AccountService.CreateAccountAsync(
                _model.Name!,
                _model.AccountType,
                _model.Currency!,
                _model.InitialBalance
            );

            _createdAccounts = AccountService.GetAccounts();
            _model = new CreateAccountModel(); // töm formulär
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }

        StateHasChanged();
    }

    public class CreateAccountModel
    {
        [Required(ErrorMessage = "Account name is required")]
        public string? Name { get; set; }
        public AccountType AccountType { get; set; } = AccountType.Savings;
        public string? Currency { get; set; } = "SEK"; //lägga till fler valutor senare?
        public decimal InitialBalance { get; set; }
    }
}

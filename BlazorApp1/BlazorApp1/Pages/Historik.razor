@page "/History"
@using BlazorApp1.Services
@using BlazorApp1.Domain
@using BlazorApp1.Interface
@inject IAccountService AccountService

<h1>History</h1>

@if (_accounts.Count == 0)
{
    @* If no accounts error message *@
    Console.WriteLine("There is no accounts yet made to show in history");
    <p>No accounts yet</p>
}
else
{
    @* If Accounts Show a dropp down list of all accounts *@
    Console.WriteLine("Showing accounts in a droppdownlist...");
    <div class="mb-2">
        <InputSelect TValue="Guid"
            class="form-select"
            id="accountSelect"
            @bind-Value="SelectedAccountId">
            @foreach (var account in _accounts)
            {
                <option value="@account.Id">@account.Name - Saldo: @account.Balance @account.Currency</option>
            }
        </InputSelect>
    </div>

    @* Sort button *@
    <div class="mb-2">
        <button class="btn btn-sm" @onclick="() => SetSort(SortKey.Date)">
            SortBy: Date @(currentKey == SortKey.Date ? (descending ? "▲" : "▼") : "")
        </button>
        <button class="btn btn-sm" @onclick="() => SetSort(SortKey.Amount)">
            SortBy: Amount @(currentKey == SortKey.Amount ? (descending ? "▲" : "▼") : "")
        </button>
    </div>

    @* Filter options *@
    <div class="mb-2">
        <label for="typeFilter">Filter by Type:</label>
        <InputSelect TValue="TransactionType?" class="form-select" id="typeFilter" @bind-Value="selectedTransactionType">
            <option value="">All</option>
            @foreach (var type in Enum.GetValues<TransactionType>())
            {
                <option value="@type">@GetTransactionTypeText(type)</option>
            }
        </InputSelect>
    </div>

    @* Dateinterval-filter *@
    <div class="mb-2 d-flex gap-3">
        <div>
            <label for="fromDate">From date:</label>
            <InputDate TValue="DateTime?" class="form-control" id="fromDate" @bind-Value="fromDate" />
        </div>
        <div>
            <label for="toDate">To date:</label>
            <InputDate TValue="DateTime?" class="form-control" id="toDate" @bind-Value="toDate" />
        </div>
    </div>

    <div class="mb-2">
        <button class="btn btn-sm btn-primary" @onclick="ApplyFilters">Apply Filter</button>
        <button class="btn btn-sm btn-secondary" @onclick="ClearFilter">Clear Filter</button>
    </div>

    @if (!_selectedAccount.Transactions.Any())
    {
        @* If no transaktions error message *@
        Console.WriteLine("There is no transactions yet made");
        <p>No Transactions yet!</p>
    }
    else
    {
        @* If Accounts Show a list of all accounts *@
        <table class="table table-sm">
            <thead>
                <tr>
                    <th>Datum</th>
                    <th>Belopp</th>
                    <th>Transaktionstyp</th>
                    <th>Saldo efter</th>
                    <th>Från -> till</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var transaction in filteredTransactions.Any() ? filteredTransactions : sortedTransaction())
                {
                    <tr>
                        <td>@transaction.Date.ToLocalTime().ToString("yyyy-MM-dd HH:mm")</td>
                        <td>@transaction.Amount</td>
                        <td>@GetTransactionTypeText(transaction.TransactionType)</td>
                        <td>@transaction.BalanceAfterTransaction</td>
                        <td>
                            @if (transaction.FromAccount.HasValue || transaction.ToAccount.HasValue)
                            {
                                <span>@(transaction.FromAccount.ToString()[..4]) ->  @((transaction.ToAccount?.ToString()[..4]) ?? "" )</span>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code {
    // Instance variable
    private List<BankAccount> _accounts;
    private List<Transaction> _transactions = new ();
    private BankAccount? _selectedAccount;
    private Guid _selectedAccountId;
    private DateTime? fromDate;
    private DateTime? toDate;
    private TransactionType? selectedTransactionType;

    //Startamount for sorting and filter
    private SortKey currentKey = SortKey.Date;
    private bool descending = true;
    private IEnumerable<Transaction> filteredTransactions = new List<Transaction>();

    //Sorting variant
    private enum SortKey
    {
        Date,
        Amount
    }

    // Filter variant
    private enum FilterKey
    {
        DateFilter,
        TypeFilter
    }

    /// <summary>
    /// 
    /// </summary>
    /// <param name="sortkey"></param>
    private void SetSort(SortKey sortkey)
    {
        if(currentKey == sortkey)
        {
            descending = !descending;
        }
        else
        {
            currentKey = sortkey;
            descending = true;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    private Guid SelectedAccountId
    {
        get => _selectedAccountId;
        set
        {
            if (_selectedAccountId == value)
                return;
            _selectedAccountId = value;
            _selectedAccount = _accounts.FirstOrDefault(account => account.Id == value);
            StateHasChanged();
        }
    }

    /// <summary>
    /// 
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        var accounts = await AccountService.GetAccounts();
        _accounts = accounts.Cast<BankAccount>().ToList();
        _transactions = new();

        if (_accounts.Count > 0)
        {
            _selectedAccountId = _accounts[0].Id;
            _selectedAccount = _accounts[0];
        }
    }

    // 
    private IEnumerable<Transaction> sortedTransaction()
    {
        if (_selectedAccount == null)
        {
            return Enumerable.Empty<Transaction>();
        }
        var list = _selectedAccount.Transactions.AsEnumerable();

        // Filter first
        if (filteredTransactions.Any())
        {
            list = filteredTransactions;
        }

        // Sort secondly
        list = currentKey switch
        {
            SortKey.Amount => descending
                ? list.OrderByDescending(t => t.Amount)
                : list.OrderBy(t => t.Amount),
            SortKey.Date => descending
                ? list.OrderByDescending(t => t.Date)
                : list.OrderBy(t => t.Date),
            _ => list
        };
        return list;
    }

    // Transaction type
    private string GetTransactionTypeText(TransactionType type) => type switch
    {
        TransactionType.Deposit => "Deposit",
        TransactionType.Withdrawal => "Withdraw",
        TransactionType.Transfer => "Transfer",
        TransactionType.Transferout => "Transfer Out",
        TransactionType.Transferin => "Transfer In",
        _ => type.ToString()
        //Ta bort transfer enum från listan..
    };

    // Apply the selected filter and remove selected filter
    private void ApplyFilters()
    {
        if (_selectedAccount == null)
        {
            return;
        }

        var transactions = _selectedAccount.Transactions.AsEnumerable();

        // Datefilter
        if (fromDate.HasValue)
        {
            transactions = transactions.Where(t => t.Date >= fromDate.Value);
        }

        // Inklude the hole daay
        if (toDate.HasValue)
        {
            transactions = transactions.Where(t => t.Date <= toDate.Value.AddDays(1).AddTicks(-1));
        }

        // Typefilter
        if (selectedTransactionType.HasValue)
        {
            transactions = transactions.Where(t => t.TransactionType == selectedTransactionType.Value);
        }

        filteredTransactions = transactions.ToList();
        Console.WriteLine($"Applied chosen filter for {selectedTransactionType}");
    }

    // Clear chosen filter
    private void ClearFilter()
    {
        selectedTransactionType = null;
        fromDate = null;
        toDate = null;
        filteredTransactions = new List<Transaction>();
        Console.WriteLine("Cleared filter");
    }
}


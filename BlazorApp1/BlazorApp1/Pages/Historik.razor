@page "/History"
@using BlazorApp1.Services
@using BlazorApp1.Domain
@using BlazorApp1.Interface
@inject IAccountService AccountService

<h1>History</h1>

@if (_accounts.Count == 0)
{
    <!-- If no accounts error message -->
    <p>No accounts yet</p>
}
else
{
    <!-- If Accounts Show a dropp down list of all accounts -->
    <div class="mb-2">
        <InputSelect TValue="Guid"
            class="form-select"
            id="accountSelect"
            @bind-Value="SelectedAccountId">
            @foreach (var account in _accounts)
            {
                <option value="@account.Id">@account.Name - Saldo: @account.Balance @account.Currency</option>
            }
        </InputSelect>
    </div>

    <!-- Sort button -->
    <div class="mb-2">
        <button class="btn btn-sm" @onclick="() => SetSort(SortKey.Date)">
            SortBy: Date @(currentKey == SortKey.Date ? (descending ? "▲" : "▼") : "")
        </button>
        <button class="btn btn-sm" @onclick="() => SetSort(SortKey.Date)">
            SortBy: Amount @(currentKey == SortKey.Amount ? (descending ? "▲" : "▼") : "")
        </button>
    </div>

    @if (!_selectedAccount.Transactions.Any())
    {
        <!-- If no transaktions error message -->
        <p>No Transactions yet!</p>
    }
    else
    {
        <!-- If Accounts Show a list of all accounts -->
        <table class="table table-sm">
            <thead>
                <tr>
                    <th>Datum</th>
                    <th>Belopp</th>
                    <th>Transaktionstyp</th>
                    <th>Saldo efter</th>
                    <th>Från -> till</th>
                </tr>
            </thead>
            <tbody>
                @foreach(var transaction in sortedTransaction())
                {
                    <tr>
                        <td>@transaction.Date.ToLocalTime().ToString("yyyy-MM-dd HH:mm")</td>
                        <td>@transaction.Amount</td>
                        <td>@transaction.TransactionType</td>
                        <td>@transaction.BalanceAfterTransaction</td>
                        <td>
                            @if (transaction.FromAccount.HasValue || transaction.ToAccount.HasValue)
                            {
                                <span>@(transaction.FromAccount.ToString()[..4]) ->  @((transaction.ToAccount?.ToString()[..4]) ?? "" )</span>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code {
    // Instance variable
    private List<BankAccount> _accounts;
    private List<Transaction> _transactions = new ();
    private BankAccount? _selectedAccount;
    private Guid _selectedAccountId;

    //Startamount for sorting
    private SortKey currentKey = SortKey.Date;
    private bool descending = true;

    //Sorting variant
    private enum SortKey
    {
        Date,
        Amount
    }

    /// <summary>
    /// 
    /// </summary>
    /// <param name="sortkey"></param>
    private void SetSort(SortKey sortkey)
    {
        if(currentKey == sortkey)
        {
            descending = !descending;
        }
        else
        {
            currentKey = sortkey;
            descending = true;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    private Guid SelectedAccountId
    {
        get => _selectedAccountId;
        set
        {
            if (_selectedAccountId == value)
                return;
            _selectedAccountId = value;
            _selectedAccount = _accounts.FirstOrDefault(account => account.Id == value);
            StateHasChanged();
        }
    }

    /// <summary>
    /// 
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        var accounts = await AccountService.GetAccounts();
        _accounts = accounts.Cast<BankAccount>().ToList();
        _transactions = new();

        if (_accounts.Count > 0)
        {
            _selectedAccountId = _accounts[0].Id;
            _selectedAccount = _accounts[0];
        }
    }

    // 
    private IEnumerable<Transaction> sortedTransaction()
    {
        if (_selectedAccount == null)
        {
            return Enumerable.Empty<Transaction>();
        }

        // Sort list, Date and amount
        var sortedList = _selectedAccount.Transactions.AsEnumerable();
        sortedList = currentKey switch
        {
            SortKey.Amount => (descending
            ? sortedList.OrderByDescending(t => t.Amount)
            : sortedList.OrderBy(t => t.Amount)),
            SortKey.Date => (descending
                ? sortedList.OrderByDescending(t => t.Date)
                : sortedList.OrderBy(t => t.Date))
        };
        return sortedList;
    }
}


@page "/Historik"
@using BlazorApp1.Interface
@using BlazorApp1.Domain
@inject IAccountService AccountService
@inject Transaction Transaction


	
	<PageTitle>History</PageTitle>

	<h1>History</h1>

<br />

<h2>My Accounts</h2>

<ul>
    @if (_accounts.Any())
    {
        <table class="table table-striped table-bordered">
            <thead>
                <tr>
                    <th @onclick="() => SortBy(nameof(BankAccount.Name))">
                        Name @GetSortIndicator(nameof(BankAccount.Name))
                    </th>
                    <th @onclick="() => SortBy(nameof(BankAccount.AccountType))">
                        Type @GetSortIndicator(nameof(BankAccount.AccountType))
                    </th>
                    <th @onclick="() => SortBy(nameof(BankAccount.Currency))">
                        Currency @GetSortIndicator(nameof(BankAccount.Currency))
                    </th>
                    <th @onclick="() => SortBy(nameof(BankAccount.Balance))">
                        Balance @GetSortIndicator(nameof(BankAccount.Balance))
                    </th>
                    <th @onclick="() => SortBy(nameof(BankAccount.LastUpdated))">
                        Last Updated @GetSortIndicator(nameof(BankAccount.LastUpdated))
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var account in _accounts)
                {
                    <tr>
                        <td>@account.Name</td>
                        <td>@account.AccountType</td>
                        <td>@account.Currency</td>
                        <td style="text-align:right">@($"{account.Balance:N2}")</td>
                        <td>@account.LastUpdated.ToString("g")</td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <h3>You dont have any accounts yet, go to "Add Account" And add youre first account.</h3>
    }

</ul>

<br />

<div>
	<h2>Transaction History</h2>
	<h5>Transaction History will be displayed here:</h5>

</div>
@* <ul>
    @if (Deposit.Any())
    {
        <table class="table table-striped table-bordered">
            <thead>
                <tr>
                    <th @onclick="() => SortBy(nameof(Transaction.AccountId))">
                        Name @GetSortIndicator(nameof(Transaction.AccountId))
                    </th>
                    <th @onclick="() => SortBy(nameof(Transaction.Amount))">
                        Amount @GetSortIndicator(nameof(Transaction.Amount))
                    </th>
                    <th @onclick="() => SortBy(nameof(Transaction.TransferReciver))">
                        Transfer Reciver @GetSortIndicator(nameof(Transaction.TransferReciver))
                    </th>
                    <th @onclick="() => SortBy(nameof(Transaction.BalanceAfterTransaction))">
                        Balance @GetSortIndicator(nameof(Transaction.BalanceAfterTransaction))
                    </th>
                    <th @onclick="() => SortBy(nameof(Transaction.Date))">
                        Last Updated @GetSortIndicator(nameof(Transaction.Date))
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var trans in Transaction)
                {
                    <tr>
                        <td>@account.Name</td>
                        <td>@account.Currency</td>
						<td>@account.Deposit</td> @* lägg till så detta är kopplat med transaktionshistoriken 
                        <td style="text-align:right">@($"{account.Balance:N2}")</td>
                        <td>@account.LastUpdated.ToString("g")</td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <h3>You dont have any tranfer.</h3>
    }

</ul> *@

@code {
    private List<IBankAccount> _accounts = new();
    private string? _currentSortColumn;
    private bool _sortAscending = true;
    private List<IBankAccount> accounts = new();

	private List<Transaction> Transactions = new();

	//sätt in logik för att hämta transaktionshistorik per konto


    protected override async Task OnInitializedAsync()
    {
        _accounts = await AccountService.GetAccounts();
    }
    private void SortBy(string? columnName) // SortBy metod för att sortera kolumnerna
    {
        if (string.IsNullOrEmpty(columnName))
            return;

        if (_currentSortColumn == columnName)
            _sortAscending = !_sortAscending; // toggle ascending/descending
        else
        {
            _currentSortColumn = columnName;
            _sortAscending = true;
        }

        _accounts = columnName switch
        {
            nameof(BankAccount.Name) => _sortAscending
                ? _accounts.OrderBy(a => a.Name).ToList()
                : _accounts.OrderByDescending(a => a.Name).ToList(),

            nameof(BankAccount.AccountType) => _sortAscending
                ? _accounts.OrderBy(a => a.AccountType).ToList()
                : _accounts.OrderByDescending(a => a.AccountType).ToList(),

            nameof(BankAccount.Currency) => _sortAscending
                ? _accounts.OrderBy(a => a.Currency).ToList()
                : _accounts.OrderByDescending(a => a.Currency).ToList(),

            nameof(BankAccount.Balance) => _sortAscending
                ? _accounts.OrderBy(a => a.Balance).ToList()
                : _accounts.OrderByDescending(a => a.Balance).ToList(),

            nameof(BankAccount.LastUpdated) => _sortAscending
                ? _accounts.OrderBy(a => a.LastUpdated).ToList()
                : _accounts.OrderByDescending(a => a.LastUpdated).ToList(),

            _ => _accounts
        };
    }

    private string GetSortIndicator(string columnName) //GetSortIndicator metod för att visa uppåt- eller nedåtpil beroende på sorteringsordning (Ändra namnen?)
    {
        if (_currentSortColumn != columnName)
            return string.Empty;

        return _sortAscending ? "▲" : "▼";
    }

    private async Task GetAccountAsync()
    {
        try
        {
            _accounts = await AccountService.GetAccounts();
        }
        catch (Exception exception)
        {
            Console.WriteLine("You are missing input");
            throw;
        }
    }

    private async Task DeleteAccountAsync(IBankAccount accountId)
    {
        try
        {
            await AccountService.DeleteAccount(accountId);
            await GetAccountAsync();
        }
        catch (Exception exception)
        {
            Console.WriteLine("Could not delete account");
            throw;
        }
    }
    //Transaktionspost skapas på båda konton
    //Transaktionshistorik ska visa datum, typ (insättning/uttag/överföring), belopp och saldo efter transaktion
    //Filtrering av historik per datumintervall och typ
    //Sortering av historik efter datum och belopp
    //Transaktionshistorik per konto (datum, typ, belopp, saldo efter)
    //Enkel sortering av historik (datum, belopp)
}



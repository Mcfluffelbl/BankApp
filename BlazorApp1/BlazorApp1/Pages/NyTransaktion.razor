@page "/NyTransaktion"
@using BlazorApp1.Domain
@inject IAccountService AccountService

<style>
    .my-custom-btn2 {
        background-color: seagreen;
        color: aliceblue;
        border: none;
        transition: background-color 0.3s ease, transform 0.1s ease;
    }

        .my-custom-btn2:hover {
            background-color: darkolivegreen;
            transform: scale(1.03);
        }

        .my-custom-btn2:active {
            background-color: grey;
            transform: scale(0.98);
        }
</style>

<h1>Transaktion</h1>

<h5>Ny transaktion:</h5>

<div class="card p-3 mt-3">
    <div class="mb-2">
        <label>Transaktionstyp:</label>
        <select @bind="transactionType" class="form-select">
            <option value="0">Deposit</option>
            <option value="1">Withdraw</option>
            <option value="2">Transfer</option>
        </select>
    </div>

    <div class="mb-2">
        <label>From account:</label>
        <select class="form-select" @bind="selectedFromAccountId">
            <option value="">-- Choose a account --</option>
            @foreach (var acc in accounts)
            {
                <option value="@acc.Id">@acc.Name (@acc.Balance:C)</option>
            }
        </select>
    </div>

    @if (transactionType == TransactionType.Transfer)
    {
        <div class="mb-2">
            <label>To account:</label>
            <select class="form-select" @bind="selectedToAccountId">
                <option value="">-- Choose a account --</option>
                @foreach (var acc in accounts.Where(a => a.Id != selectedFromAccountId))
                {
                    <option value="@acc.Id">@acc.Name (@acc.Balance:C)</option>
                }
            </select>
        </div>
    }

    <div class="mb-2">
        <label>Amount:</label>
        <input type="number" step="0.01" @bind="amount" class="form-control" />
    </div>

    <button class="btn my-custom-btn2" @onclick="ExecuteTransaction">Utför</button>

    @if (!string.IsNullOrEmpty(message))
    {
        <div class="alert alert-info mt-3">@message</div>
    }
</div>

@code {
    private List<IBankAccount> accounts = new();
    private Guid? selectedFromAccountId;
    private Guid? selectedToAccountId;
    private decimal amount;
    private TransactionType transactionType;
    private string? message;

    private IBankAccount? SelectedFromAccount =>
        accounts.FirstOrDefault(a => a.Id == selectedFromAccountId);

    private IBankAccount? SelectedToAccount =>
        accounts.FirstOrDefault(a => a.Id == selectedToAccountId);

    protected override async Task OnInitializedAsync()
    {
        accounts = await AccountService.GetAccounts();
    }

    private async Task ExecuteTransaction()
    {
        var from = SelectedFromAccount;
        var to = SelectedToAccount;

        if (from == null)
        {
            message = "Chosse an account to transfer from.";
            return;
        }
        if (amount <= 0)
        {
            message = "The amount needs to be bigger than 0.";
            return;
        }

        switch (transactionType)
        {
            case TransactionType.Deposit:
                from.Deposit(amount);
                message = $"Deposited amount: {amount:C} to {from.Name}.";
                break;

            case TransactionType.Withdrawal:
                if (from.Balance < amount)
                {
                    message = "Not enough balance to takeout.";
                    return;
                }
                from.Withdraw(amount);
                message = $"Withdrawd amount:{amount:C} from {from.Name}.";
                break;

            case TransactionType.Transfer:
                if (to == null)
                {
                    message = "Choice an account to transfer to.";
                    return;
                }
                if (from.Balance < amount)
                {
                    message = "Not high enough amount at deposit.";
                    return;
                }
                from.Withdraw(amount);
                to.Deposit(amount);
                message = $"Transferd: {amount:C} from {from.Name} to {to.Name}.";
                break;
        }

        await AccountService.UpdateAccounts(accounts);
    }
}
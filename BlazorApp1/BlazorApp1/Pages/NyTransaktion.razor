@page "/NyTransaktion"
@using BlazorApp1.Domain
@inject IAccountService AccountService

<h1>New Transaction</h1>

@if (_accounts.Count < 1)
{
    <p>You need at least one account to make a transaction.</p>
}
else
{
    <EditForm Model="_model" OnValidSubmit="OnSubmitAsync">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <!-- Transaction Type -->
        <div class="mb-2">
            <label>Transaction Type</label>
            <InputSelect @bind-Value="_model.TransactionType" class="form-select">
                @foreach (var type in Enum.GetValues(typeof(TransactionType)))
                {
                    <option value="@type">@type</option>
                }
            </InputSelect>
        </div>

        @* Visa bara dessa fält om Transfer är valt *@
        @if (_model.TransactionType == TransactionType.Transfer)
        {
            <!-- Från-konto -->
            <div class="mb-2">
                <label>From Account</label>
                <InputSelect TValue="Guid"
                             @bind-Value="_model.FromAccountId"
                             class="form-select"
                             @onchange="HandleFormChanged">
                    <option value="@Guid.Empty">-- Select an account --</option>
                    @foreach (var account in _accounts)
                    {
                        <option value="@account.Id">@account.Name: @account.Balance @account.Currency</option>
                    }
                </InputSelect>
            </div>

            <!-- Till-konto -->
            <div class="mb-2">
                <label>To Account</label>
                <InputSelect TValue="Guid"
                             @bind-Value="_model.ToAccountId"
                             class="form-select"
                             disabled="@(_model.FromAccountId == Guid.Empty)">
                    <option value="@Guid.Empty">Choose account</option>
                    @foreach (var account in _toAccounts)
                    {
                        <option value="@account.Id">@account.Name: @account.Balance @account.Currency</option>
                    }
                </InputSelect>
            </div>
        }
        else
        {
            <!-- Om det inte är Transfer, visa bara ett konto att jobba med -->
            <div class="mb-2">
                <label>Account</label>
                <InputSelect TValue="Guid"
                             @bind-Value="_model.FromAccountId"
                             class="form-select">
                    <option value="@Guid.Empty">-- Select an account --</option>
                    @foreach (var account in _accounts)
                    {
                        <option value="@account.Id">@account.Name: @account.Balance @account.Currency</option>
                    }
                </InputSelect>
            </div>
        }

        <!-- Belopp -->
        <div class="mb-2">
            <label>Amount</label>
            <InputNumber TValue="decimal" @bind-Value="_model.Amount" class="form-control"></InputNumber>
        </div>

        <button type="submit" class="btn btn-primary">Submit</button>
    </EditForm>

    <h4>Accounts</h4>
    <ul>
        @foreach (var account in _accounts)
        {
            <li>@account.Name: @account.Balance @account.Currency</li>
        }
    </ul>
}

@code {
    private readonly TransferFormModel _model = new();
    private List<BankAccount> _accounts = new();
    private List<BankAccount> _toAccounts = new();

    private class TransferFormModel
    {
        public Guid FromAccountId { get; set; }
        public Guid ToAccountId { get; set; }
        public decimal Amount { get; set; }
        public TransactionType TransactionType { get; set; } = TransactionType.Transfer;
    }

    protected override async void OnInitialized()
    {
        _accounts = await AccountService.GetAccounts();
        _toAccounts = _accounts;
    }

    private async Task OnSubmitAsync()
    {
        try
        {
            switch (_model.TransactionType)
            {
                case TransactionType.Transfer:
                    AccountService.Transfer(_model.FromAccountId, _model.ToAccountId, _model.Amount);
                    break;

                case TransactionType.Deposit:
                    AccountService.Deposit(_model.FromAccountId, _model.Amount);
                    break;

                case TransactionType.Withdrawal:
                    AccountService.Withdraw(_model.FromAccountId, _model.Amount);
                    break;
            }

            _accounts = await AccountService.GetAccounts();
            _model.Amount = 0;
            _model.ToAccountId = Guid.Empty;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private void HandleFormChanged(ChangeEventArgs eventArgs)
    {
        if (Guid.TryParse(eventArgs.Value?.ToString(), out var id))
        {
            OnFormChanged(id);
        }
    }

    private void OnFormChanged(Guid fromId)
    {
        _model.FromAccountId = fromId;
        var from = _accounts.FirstOrDefault(x => x.Id == fromId);
        _toAccounts = from != null
            ? _accounts.Where(a => a.Id != from.Id).ToList()
            : _accounts.ToList();
        _model.ToAccountId = Guid.Empty;
    }
}